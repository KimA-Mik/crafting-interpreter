package lexer

object DefaultTokens {
    val LEFT_PAREN = Token(type = TokenType.LEFT_PAREN, lexeme = Symbols.LEFT_PAREN.toString())
    val RIGHT_PAREN = Token(type = TokenType.RIGHT_PAREN, lexeme = Symbols.RIGHT_PAREN.toString())
    val LEFT_BRACE = Token(type = TokenType.LEFT_BRACE, lexeme = Symbols.LEFT_BRACE.toString())
    val RIGHT_BRACE = Token(type = TokenType.RIGHT_BRACE, lexeme = Symbols.RIGHT_BRACE.toString())
    val DOT = Token(type = TokenType.DOT, lexeme = Symbols.DOT.toString())
    val COMMA = Token(type = TokenType.COMMA, lexeme = Symbols.COMMA.toString())
    val STAR = Token(type = TokenType.STAR, lexeme = Symbols.STAR.toString())
    val EQUAL = Token(type = TokenType.EQUAL, lexeme = Symbols.EQUAL.toString())
    val EQUAL_EQUAL = Token(type = TokenType.EQUAL_EQUAL, lexeme = "${Symbols.EQUAL}${Symbols.EQUAL}")
    val SLASH = Token(type = TokenType.SLASH, lexeme = Symbols.SLASH.toString())
    val PLUS = Token(type = TokenType.PLUS, lexeme = Symbols.PLUS.toString())
    val MINUS = Token(type = TokenType.MINUS, lexeme = Symbols.MINUS.toString())
    val SEMICOLON = Token(type = TokenType.SEMICOLON, lexeme = Symbols.SEMICOLON.toString())
    val BANG = Token(type = TokenType.BANG, lexeme = Symbols.BANG.toString())
    val BANG_EQUAL = Token(type = TokenType.BANG_EQUAL, lexeme = "${Symbols.BANG}${Symbols.EQUAL}")
    val LESS = Token(type = TokenType.LESS, lexeme = Symbols.LESS.toString())
    val LESS_EQUAL = Token(type = TokenType.LESS_EQUAL, lexeme = "${Symbols.LESS}${Symbols.EQUAL}")
    val GREATER = Token(type = TokenType.GREATER, lexeme = Symbols.GREATER.toString())
    val GREATER_EQUAL = Token(type = TokenType.GREATER_EQUAL, lexeme = "${Symbols.GREATER}${Symbols.EQUAL}")

    val AND = Token(type = TokenType.AND, lexeme = Keywords.AND)
    val CLASS = Token(type = TokenType.CLASS, lexeme = Keywords.CLASS)
    val ELSE = Token(type = TokenType.ELSE, lexeme = Keywords.ELSE)
    val FALSE = Token(type = TokenType.FALSE, lexeme = Keywords.FALSE)
    val FOR = Token(type = TokenType.FOR, lexeme = Keywords.FOR)
    val FUN = Token(type = TokenType.FUN, lexeme = Keywords.FUN)
    val IF = Token(type = TokenType.IF, lexeme = Keywords.IF)
    val NIL = Token(type = TokenType.NIL, lexeme = Keywords.NIL)
    val OR = Token(type = TokenType.OR, lexeme = Keywords.OR)
    val PRINT = Token(type = TokenType.PRINT, lexeme = Keywords.PRINT)
    val RETURN = Token(type = TokenType.RETURN, lexeme = Keywords.RETURN)
    val SUPER = Token(type = TokenType.SUPER, lexeme = Keywords.SUPER)
    val THIS = Token(type = TokenType.THIS, lexeme = Keywords.THIS)
    val TRUE = Token(type = TokenType.TRUE, lexeme = Keywords.TRUE)
    val VAR = Token(type = TokenType.VAR, lexeme = Keywords.VAR)
    val WHILE = Token(type = TokenType.WHILE, lexeme = Keywords.WHILE)

    val EOF = Token(type = TokenType.EOF, lexeme = String())
}